"""
Django settings for seat_booking_system_backend project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

os.makedirs(os.path.join(BASE_DIR, 'logs'), exist_ok=True)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-c!vb=ue8244yhc8=ueg2mvjpqj7%2id-2-oo7_&2s2lqe&)@lg'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 第三方套件
    'rest_framework',
    'corsheaders',
    # 您的應用程式
    'booking',
    'drf_spectacular',
]

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'EXCEPTION_HANDLER': 'seat_booking_system_backend.utils.custom_exception_handler',
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'json': {
            '()': 'pythonjsonlogger.jsonlogger.JsonFormatter', # 需要安裝 pip install python-json-logger
            'format': '''
                {
                    "timestamp": "%(asctime)s",
                    "level": "%(levelname)s",
                    "name": "%(name)s",
                    "message": "%(message)s",
                    "pathname": "%(pathname)s",
                    "lineno": "%(lineno)d"
                }'''
        }
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'logs/django.log', # 日誌文件路徑
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,             # 保留 5 個備份文件
            'formatter': 'json',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'booking': { # 您的應用程式日誌
            'handlers': ['console', 'file'],
            'level': 'DEBUG', # 開發時可以使用 DEBUG，生產時用 INFO
            'propagate': False,
        },
        '': { # root logger
            'handlers': ['console', 'file'],
            'level': 'INFO',
        },
    }
}

SPECTACULAR_SETTINGS = {
    'TITLE': '座位預訂系統 API', # 您的 API 標題
    'DESCRIPTION': '用於管理場地、活動、座位和訂單的 API', # 您的 API 描述
    'VERSION': '1.0.0', # API 版本
    'SERVE_INCLUDE_SCHEMA': False, # 將 schema 定義與 UI 分開，確保生產環境安全
    # 其他可選配置：
    # 'SWAGGER_UI_SETTINGS': {
    #     'deepLinking': True,
    #     'persistAuthorization': True,
    # },
    # 'REDOC_UI_SETTINGS': {
    #     'expandResponses': 'all',
    # },
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'seat_booking_system_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'seat_booking_system_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'seat_booking_db',          # 請改成您想建立的資料庫名稱
        'USER': 'postgres',                  # PostgreSQL 超級使用者名稱
        'PASSWORD': '790716', # 請替換成您實際設定的密碼
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- 在檔案底部或合適位置添加以下配置 ---
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8080", # Vue.js Vite 開發伺服器的預設端口
    "http://127.0.0.1:8080",
    # 如果未來您的前端部署在其他網址，也請在此添加
]

# 或者如果允許所有來源 (開發環境可暫用，生產環境不建議)
# CORS_ALLOW_ALL_ORIGINS = True